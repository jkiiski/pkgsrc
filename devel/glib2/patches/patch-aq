--- gio/gsocket.c.orig	2013-04-15 21:22:13.000000000 +0000
+++ gio/gsocket.c	2013-05-23 13:24:12.000000000 +0000
@@ -37,6 +37,9 @@
 #include <signal.h>
 #include <string.h>
 #include <stdlib.h>
+#ifdef __NetBSD__
+#include <sys/un.h>
+#endif
 
 #ifndef G_OS_WIN32
 # include <fcntl.h>
@@ -392,7 +395,7 @@
     }
 
   addrlen = sizeof address;
-  if (getsockname (fd, (struct sockaddr *) &address, &addrlen) != 0)
+  if (getsockname (fd, (struct sockaddr *) &address, (socklen_t *) &addrlen) != 0)
     {
       errsv = get_socket_errno ();
       goto err;
@@ -459,7 +462,7 @@
   if (socket->priv->family != G_SOCKET_FAMILY_INVALID)
     {
       addrlen = sizeof address;
-      if (getpeername (fd, (struct sockaddr *) &address, &addrlen) >= 0)
+      if (getpeername (fd, (struct sockaddr *) &address, (socklen_t *) &addrlen) >= 0)
 	socket->priv->connected = TRUE;
     }
 
@@ -847,7 +850,11 @@
 						     P_("Listen backlog"),
 						     P_("Outstanding connections in the listen queue"),
 						     0,
+#ifdef SOMAXCONN
 						     SOMAXCONN,
+#else
+						     10,
+#endif
 						     10,
 						     G_PARAM_READWRITE |
                                                      G_PARAM_STATIC_STRINGS));
@@ -1318,14 +1325,18 @@
 
   if (socket->priv->family == G_SOCKET_FAMILY_IPV4)
     {
+#ifdef IP_TTL
       g_socket_get_option (socket, IPPROTO_IP, IP_TTL,
 			   &value, &error);
+#endif
     }
+#ifdef IPV6_UNICAST_HOPS
   else if (socket->priv->family == G_SOCKET_FAMILY_IPV6)
     {
       g_socket_get_option (socket, IPPROTO_IPV6, IPV6_UNICAST_HOPS,
 			   &value, &error);
     }
+#endif
   else
     g_return_val_if_reached (0);
 
@@ -1359,9 +1370,12 @@
 
   if (socket->priv->family == G_SOCKET_FAMILY_IPV4)
     {
+#ifdef IP_TTL
       g_socket_set_option (socket, IPPROTO_IP, IP_TTL,
 			   ttl, &error);
+#endif
     }
+#ifdef IPV6_UNICAST_HOPS
   else if (socket->priv->family == G_SOCKET_FAMILY_IPV6)
     {
       g_socket_set_option (socket, IPPROTO_IP, IP_TTL,
@@ -1369,6 +1383,7 @@
       g_socket_set_option (socket, IPPROTO_IPV6, IPV6_UNICAST_HOPS,
 			   ttl, &error);
     }
+#endif
   else
     g_return_if_reached ();
 
@@ -1401,7 +1416,7 @@
   gint value;
 
   g_return_val_if_fail (G_IS_SOCKET (socket), FALSE);
-
+#ifdef SO_BROADCAST
   if (!g_socket_get_option (socket, SOL_SOCKET, SO_BROADCAST,
 			    &value, &error))
     {
@@ -1411,6 +1426,11 @@
     }
 
   return !!value;
+#else
+      g_warning ("error getting broadcast: %s", error->message);
+      g_error_free (error);
+      return FALSE;
+#endif
 }
 
 /**
@@ -1434,6 +1454,7 @@
 
   broadcast = !!broadcast;
 
+#ifdef SO_BROADCAST
   if (!g_socket_set_option (socket, SOL_SOCKET, SO_BROADCAST,
 			    broadcast, &error))
     {
@@ -1443,6 +1464,11 @@
     }
 
   g_object_notify (G_OBJECT (socket), "broadcast");
+#else
+      g_warning ("error setting broadcast: %s", error->message);
+      g_error_free (error);
+      return;
+#endif
 }
 
 /**
@@ -1467,14 +1493,18 @@
 
   if (socket->priv->family == G_SOCKET_FAMILY_IPV4)
     {
+#ifdef IP_MULTICAST_LOOP
       g_socket_get_option (socket, IPPROTO_IP, IP_MULTICAST_LOOP,
 			   &value, &error);
+#endif
     }
+#ifdef IPV6_MULTICAST_LOOP
   else if (socket->priv->family == G_SOCKET_FAMILY_IPV6)
     {
       g_socket_get_option (socket, IPPROTO_IPV6, IPV6_MULTICAST_LOOP,
 			   &value, &error);
     }
+#endif
   else
     g_return_val_if_reached (FALSE);
 
@@ -1512,9 +1542,12 @@
 
   if (socket->priv->family == G_SOCKET_FAMILY_IPV4)
     {
+#ifdef IP_MULTICAST_LOOP
       g_socket_set_option (socket, IPPROTO_IP, IP_MULTICAST_LOOP,
 			   loopback, &error);
+#endif
     }
+#ifdef IPV6_MULTICAST_LOOP
   else if (socket->priv->family == G_SOCKET_FAMILY_IPV6)
     {
       g_socket_set_option (socket, IPPROTO_IP, IP_MULTICAST_LOOP,
@@ -1522,6 +1555,7 @@
       g_socket_set_option (socket, IPPROTO_IPV6, IPV6_MULTICAST_LOOP,
 			   loopback, &error);
     }
+#endif
   else
     g_return_if_reached ();
 
@@ -1556,14 +1590,18 @@
 
   if (socket->priv->family == G_SOCKET_FAMILY_IPV4)
     {
+#ifdef IP_MULTICAST_TTL
       g_socket_get_option (socket, IPPROTO_IP, IP_MULTICAST_TTL,
 			   &value, &error);
+#endif
     }
+#ifdef IPV6_MULTICAST_HOPS
   else if (socket->priv->family == G_SOCKET_FAMILY_IPV6)
     {
       g_socket_get_option (socket, IPPROTO_IPV6, IPV6_MULTICAST_HOPS,
 			   &value, &error);
     }
+#endif
   else
     g_return_val_if_reached (FALSE);
 
@@ -1598,9 +1636,12 @@
 
   if (socket->priv->family == G_SOCKET_FAMILY_IPV4)
     {
+#ifdef IP_MULTICAST_TTL
       g_socket_set_option (socket, IPPROTO_IP, IP_MULTICAST_TTL,
 			   ttl, &error);
+#endif
     }
+#ifdef IPV6_MULTICAST_HOPS
   else if (socket->priv->family == G_SOCKET_FAMILY_IPV6)
     {
       g_socket_set_option (socket, IPPROTO_IP, IP_MULTICAST_TTL,
@@ -1608,6 +1649,7 @@
       g_socket_set_option (socket, IPPROTO_IPV6, IPV6_MULTICAST_HOPS,
 			   ttl, &error);
     }
+#endif
   else
     g_return_if_reached ();
 
@@ -1721,7 +1763,7 @@
 
   g_return_val_if_fail (G_IS_SOCKET (socket), NULL);
 
-  if (getsockname (socket->priv->fd, (struct sockaddr *) &buffer, &len) < 0)
+  if (getsockname (socket->priv->fd, (struct sockaddr *) &buffer, (socklen_t *) &len) < 0)
     {
       int errsv = get_socket_errno ();
       g_set_error (error, G_IO_ERROR, socket_io_error_from_errno (errsv),
@@ -1764,7 +1806,7 @@
 
   if (!socket->priv->remote_address)
     {
-      if (getpeername (socket->priv->fd, (struct sockaddr *) &buffer, &len) < 0)
+      if (getpeername (socket->priv->fd, (struct sockaddr *) &buffer, (socklen_t *) &len) < 0)
 	{
 	  int errsv = get_socket_errno ();
 	  g_set_error (error, G_IO_ERROR, socket_io_error_from_errno (errsv),
@@ -1965,6 +2007,7 @@
       result = setsockopt (socket->priv->fd, IPPROTO_IP, optname,
 			   &mc_req, sizeof (mc_req));
     }
+#ifdef IPV6_JOIN_GROUP
   else if (g_inet_address_get_family (group) == G_SOCKET_FAMILY_IPV6)
     {
       struct ipv6_mreq mc_req_ipv6;
@@ -1982,6 +2025,7 @@
       result = setsockopt (socket->priv->fd, IPPROTO_IPV6, optname,
 			   &mc_req_ipv6, sizeof (mc_req_ipv6));
     }
+#endif
   else
     g_return_val_if_reached (FALSE);
 
@@ -4349,7 +4393,7 @@
 
   ret = NULL;
 
-#if defined(__linux__) || defined(__OpenBSD__)
+#if defined(__linux__) || (defined(__OpenBSD__) && !defined(__MirBSD__))
   {
     socklen_t optlen;
 #if defined(__linux__)
@@ -4384,6 +4428,35 @@
                                   &native_creds);
       }
   }
+#elif defined(__NetBSD__) && defined(LOCAL_PEEREID)
+  {
+    struct unpcbid cred;
+    socklen_t len = sizeof(cred);
+    if (getsockopt(socket->priv->fd, 0, LOCAL_PEEREID, &cred, &len) < 0)
+      {
+	int errsv = get_socket_errno ();
+	g_set_error (error,
+		     G_IO_ERROR,
+		     socket_io_error_from_errno (errsv),
+		     _("Unable to get pending error: %s"),
+		     socket_strerror (errsv));
+      }
+    else
+      {
+	struct {
+		pid_t pid;
+		uid_t uid;
+		gid_t gid;
+	} native_creds;
+	native_creds.uid = cred.unp_euid;
+	native_creds.gid = cred.unp_egid;
+	native_creds.pid = cred.unp_pid;
+	ret = g_credentials_new ();
+	g_credentials_set_native (ret,
+				  G_CREDENTIALS_TYPE_LINUX_UCRED,
+				  &native_creds);
+      }
+  }
 #else
   g_set_error_literal (error,
                        G_IO_ERROR,
@@ -4437,7 +4510,7 @@
 
   *value = 0;
   size = sizeof (gint);
-  if (getsockopt (socket->priv->fd, level, optname, value, &size) != 0)
+  if (getsockopt (socket->priv->fd, level, optname, value, (socklen_t *) &size) != 0)
     {
       int errsv = get_socket_errno ();
 
